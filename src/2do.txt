Хронология заданий:

A)+ Создать классы, захардкодить репозиторий
B)+ Сконфигурировать Spring-beans через XML
C)+ Сконфигурировать все, что касается pizza через bean
D)- Создать собственную аннотацию
X)+ Order должен генерироватся OrderService с присвоением номера заказа
E)+ Подключить EntityManagerFactory через spring
F)+ Реализовать базовые функции репозитория через JPA
G)+ Расширить доменную модель: включив возможность добавлять в заказ определённое число пицц, и
статус заказа (NEW, IN_PROGRSS, CANCELED, DONE, … - с ограничениями на возможные переходы между статусами )
H) +у заказа должен быть Customer, у которого в свою очередь должен быть Address доставки
I) +В слое Repository (DAO) реализовать базовые CRUD операции (и те, которые могут пригодятся: к примеру – найти все
   заказы кастомера сделанные за определенный период) с использованием JPA
J) +Используя JPA + Spring сконфигурировать и проверить работоспособность (В дальнейшем слой Repository будет
   тестироваться с использованием модульных тестов для in memory DB и/или интеграционных тестов для реальной DB)
K) +JPAPizzaRepositoryIT - интеграционный тест, требует наличие реальной БД. После выполнения каждого из тестовых
методов происходит откат транзакции.
L) +JPAPizzaRepositoryTest - модульный* тест, выполняется с использованием HSQL DB (in memory db), и при каждом
запуске сначала создает БД.
M) Эти классы наследуются от AbstractTransactionalJUnit4SpringContextTests, в котором есть ряд удобных методов
по работе с БД используя обычные SQL-запросы (к примеру):
   - countRowsInTable
   - deleteFromTableWhere
   - executeSqlScript
   и переменная класса JdbcTemplate jdbcTemplate.
N)+ Написать модульные тесты для ваших методов Repository используя HSQL DB.
